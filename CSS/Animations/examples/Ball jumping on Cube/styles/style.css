:root {
  --cube-clr: 233 100% 59%; /* hsl-code */
  --ball-clr: 200 90% 59%; /* hsl-code */
  --main-bg-clr: 223 100% 1%;
  --ground-tile-1-clr: 200 87% 90%;
  --ground-tile-2-clr: 200 87% 5%;
  /* --light-clr: white; */

  --cube-width: 2em;
  --cube-rotateY: 30deg;

  --ball-size: 1em;

  --ease-in: cubic-bezier(0.6, 0, 1, 1);
  --ease-out: cubic-bezier(0, 0, 0.4, 1);

  --ballBounce-duration: 1.8s;
  --camRotate-duration: 36s;
}

*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  min-height: 100vh;
  font-size: 48px; /* used as a global variable */

  display: grid;
  align-items: stretch;

  background-color: hsl(var(--main-bg-clr));

  overflow: hidden;

  perspective: 630px;
  perspective-origin: 50% calc(50% - 250px);
}

.scene {
  position: relative;
  height: 50%;
  transform-style: preserve-3d;

  animation: camRotation var(--camRotate-duration) linear infinite;
}

.floor {
  --floor-size: 20em;
  --tile-size: 1em;

  position: absolute;
  top: 100%;
  left: 50%;

  width: var(--floor-size);
  /* height: var(--floor-size); */
  aspect-ratio: 1;

  transform: translate(-50%, -50%) rotateX(90deg);
  transform-origin: center;
  transform-style: preserve-3d;

  background-image: radial-gradient(circle at center, #0000, #000 70%),
    conic-gradient(
      from 45deg,
      hsl(var(--ground-tile-1-clr)) 25%,
      hsl(var(--ground-tile-2-clr)) 25% 50%,
      hsl(var(--ground-tile-1-clr)) 50% 75%,
      hsl(var(--ground-tile-2-clr)) 75%
    );
  background-size: 100%, var(--tile-size) var(--tile-size);
}

.cube {
  --width: var(--cube-width, 2em);

  /* container-type: size; */

  position: absolute;
  bottom: 0;
  left: 50%;

  width: var(--width);
  height: var(--width);

  transform: translateX(-50%) rotateY(var(--cube-rotateY));

  z-index: 1;

  transform-style: preserve-3d;
  transform-origin: bottom;

  animation: jellyCube var(--ballBounce-duration) var(--ease-in) infinite;
}

.cube > :is(.top, .bottom, .front, .back, .left, .right) {
  position: absolute;
  width: 100%;
  height: 100%;
  background-color: hsl(var(--cube-clr) / 0.5);
}

.cube > :is(.front, .back, .left, .right) {
  box-shadow: inset 0 0 1em #000a;
}

.cube > .top {
  top: 0;

  /* width: 100cqmax; */
  /* height: 100cqmax; */

  transform: translateY(-50%) rotateX(90deg);

  overflow: hidden;
}

.cube > .bottom {
  bottom: 0;
  /* width: 100cqmax; */
  /* height: 100cqmax; */

  transform: translateY(50%) rotateX(-90deg);
  box-shadow: inset 0 0 var(--width) black;
}

/* cube shadow, using it for animating the cube */
.floor::after {
  content: '';

  width: var(--cube-width);
  height: var(--cube-width);

  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) rotateZ(calc(-1 * var(--cube-rotateY)))
    scale(1.5);

  background-color: #000;
  opacity: 0.5;
  filter: blur(15px);

  animation: jellyCubeShadow var(--ballBounce-duration) var(--ease-in) infinite;
}

.cube > .front {
  transform: translateZ(1em);
}

.cube > .right {
  right: 0;
  transform: translateX(50%) rotateY(90deg);
}

.cube > .back {
  transform: translateZ(-1em) rotateY(180deg);
}

.cube > .left {
  left: 0;
  transform: translateX(-50%) rotateY(270deg);
}

.ball {
  position: absolute;
  bottom: 2em;
  left: 50%;

  width: var(--ball-size);
  aspect-ratio: 1;
  border-radius: 50%;

  transform: translateX(-50%);
  transform-origin: left; /* to apply the camRotation animation safely */
  z-index: 1;

  background-color: hsl(var(--ball-clr));
  background-image: linear-gradient(to top, #000e, #0000);
  background-blend-mode: color-burn;

  transform-style: preserve-3d;

  animation: ballBounce var(--ballBounce-duration) var(--ease-in) infinite,
    camRotation var(--camRotate-duration) linear infinite reverse;
}

/*ball's shadow*/
.cube > .top::after,
.cube > .top::before {
  content: '';

  width: calc(var(--ball-size) / 2);
  aspect-ratio: 1;
  border-radius: 50%;

  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);

  background-image: radial-gradient(black, #0008);
}

.cube > .top::after {
  animation: ballShadow var(--ballBounce-duration) var(--ease-in) infinite;
}

.cube > .top::before {
  filter: blur(5px);

  animation: ballShadowBlur var(--ballBounce-duration) var(--ease-in) infinite;
}
